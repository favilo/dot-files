export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git'"
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
export FZF_CTRL_T_OPTS="\
  --preview 'bat -n --color=always {}'\
  --bind 'ctrl-]:change-preview-window(down|hidden|)'"

[ -f /usr/share/fzf ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf ] && source /usr/share/fzf/completion.zsh

# alias docker=podman

command -v kubectl >/dev/null && source <(kubectl completion zsh)

fpath=($fpath $HOME/.zsh/completion)

[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh

export PATH="$HOME/bin:/usr/local/bin:$PATH"
export PATH="$PATH:$HOME/.cabal/bin"
export PATH="$PATH:$HOME/.cargo/bin"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$PATH:$HOME/go/bin"
export PATH="$PATH:/snap/bin"
export PATH="$PATH:$HOME/.emacs.d/bin"
export PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"
export PATH="${PATH}:/opt/muslcc/arm-linux-musleabihf/bin"
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH}"
# export QT_QPA_PLATFORM=wayland
export GPG_TTY=$(tty)
export EDITOR=nvim

export CARGO_TARGET_DIR="$HOME/.cargo/target"

alias ls=eza
alias la=ls -lah
alias vim="nvim"
alias ta="tmux attach"
alias cat="bat -p"
alias jq="jaq"
alias autorandr="autorandr --match-edid"
alias zshconfig="nvim ~/.zshrc.local"
alias ohmyzsh="nvim ~/.oh-my-zsh"

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

# if (( $+commands[tag] )); then
#     export TAG_SEARCH_PROG=rg  # replace with rg for ripgrep
#     tag() { command tag "$@"; source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null }
#     # alias rg=tag  # replace with rg for ripgrep
# fi
command -v op >/dev/null && eval "$(op completion zsh)" && compdef _op op
command -v direnv >/dev/null && eval "$(direnv hook zsh)"
eval "$(zoxide init zsh)"
alias cd=z
alias cdi=zi
export _ZO_ECHO=1

export JAVA_HOME=/usr/lib/jvm/default-java
export JAVA8_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export JAVA11_HOME=/usr/lib/jvm/java-11-openjdk-amd64
export JAVA17_HOME=/usr/lib/jvm/java-17-openjdk-amd64
export JAVA21_HOME=/usr/lib/jvm/java-21-openjdk-amd64

if [[ -d $HOME/Android/Sdk/ ]] ; then
    export ANDROID_HOME="$HOME/Android/Sdk"
    export NDK_HOME="$ANDROID_HOME/ndk"
    export NDK_VERSION="23.1.7779620"
    export ANDROID_NDK_HOME="$NDK_HOME/$NDK_VERSION"

    export PATH="$JAVA_HOME/bin:$PATH"
    export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$PATH" # sdkmanager
    export PATH="$ANDROID_HOME/platform-tools:$PATH" #adb
fi


export SSH_AUTH_SOCK=~/.1password/agent.sock
export TELEPORT_ADD_KEYS_TO_AGENT=no

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/favilo/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/home/favilo/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
[ -f '/home/favilo/Downloads/google-cloud-sdk/completion.zsh.inc' ] && source '/home/favilo/Downloads/google-cloud-sdk/completion.zsh.inc'
[ -f /usr/share/nvm/init-nvm.sh ] && source /usr/share/nvm/init-nvm.sh

setopt prompt_subst # enable command substition in prompt

autoload -U is-at-least
autoload -Uz vcs_info
function precmd() { 
  vcs_info 
}

zstyle ':vcs_info:git:*' format '%b '

# INFO: Steal the PROMPT variable from my oh-my-zsh theme
# shellcheck disable=SC2154
ret_status="%(?:%{${fg_bold[green]}%}➜ :%{${fg_bold[red]}%}➜ %s)"
# INFO: Change %T to %* to show the seconds in the prompt
export PROMPT=$'%{$fg[yellow]%}[%T] %{$fg[green]%}%n@%m: %{$reset_color%}%{$fg[blue]%}%/ %{$reset_color%}%{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}
${ret_status} %{$reset_color%} '

# shellcheck disable=SC2034
export PROMPT3='{ ‥ } '  

# TODO: Figure out how to make this work with atuin
# TMOUT=1
# if is-at-least 5.1; then
#     redraw_tmout() {
#         emulate -L zsh
#         case $WIDGET in
#             expand-or-complete|self-insert|*-line-or-beginning-search|backward-delete-char|.history-incremental-*|reset-prompt|atuin-*)
#                 :
#                 ;;
#             *)
#                 zle && zle reset-prompt
#                 ;;
#         esac
#     }
# else
#     redraw_tmout() { zle reset-prompt }
# fi
# TRAPALRM() {
#     redraw_tmout
# }

schedprompt() {
  emulate -L zsh
  zmodload -i zsh/sched

  # Remove existing event, so that multiple calls to
  # "schedprompt" work OK.  (You could put one in precmd to push
  # the timer 30 seconds into the future, for example.)
  integer i=${"${(@)zsh_scheduled_events#*:*:}"[(I)schedprompt]}
  (( i )) && sched "-$i"

  # Test that zle is running before calling the widget (recommended
  # to avoid error messages).
  # Otherwise it updates on entry to zle, so there's no loss.
  zle && zle reset-prompt

  # This ensures we're not too far off the start of the minute
  sched +30 schedprompt
}

export LESS='-R'
export LESSOPEN='| ~/.lessfilter %s'

##
# Load any extra Zshell profile scripts
##
if [[ -d "${HOME}/.profile.d"  ]]; then
    for f in "${HOME}"/.profile.d/*.zsh; do
        # shellcheck source=$HOME/.profile.d/*.zsh
        source "$f"
    done
fi

command -v atuin >/dev/null && eval "$(atuin init zsh --disable-up-arrow)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
